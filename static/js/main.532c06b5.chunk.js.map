{"version":3,"sources":["styles/App.js","helpers/initCells.js","helpers/moveCells.js","helpers/removeAndIncreaseCells.js","helpers/populateField.js","helpers/cellManager.js","helpers/constants.js","helpers/increaseScore.js","styles/Field.js","styles/Layout.js","styles/ControlPanel.js","Components/Layout/Layout.js","Components/Field/Field.js","Components/ControlPanel/ControlPanel.js","Components/Button/Button.js","Components/Score/Score.js","Components/Modal/Modal.js","App.js","index.js"],"names":["H1","styled","h1","_templateObject","COLLEFT","div","_templateObject2","COLRIGHT","_templateObject3","P","p","_templateObject4","initCells","cell1","create","getRandomCoord","defaultCellValue","cell2","x","y","Math","floor","random","matrixLength","directions","UP","DOWN","LEFT","RIGHT","moveCells","direction","cells","cloneDeep","matrix","Array","from","forEach","cell","rotateMatrixFromDirection","moveCell","rotateMatrixToDirection","nextRow","currentRow","state","cellStates","MOVING","value","IDLE","DYING","INCREASE","matrixRotate","removeAndIncreaseCells","filter","map","populateField","restartGame","occupiedCoords","Set","add","size","pow","startSize","sum","concat","Object","toConsumableArray","id","uniqueId","calculateSaturation","step","calculateLightness","ms","winScore","increaseScore","reduce","score","FieldTag","Field_templateObject","Background","Field_templateObject2","Playground","Field_templateObject3","BackgroundCell","Field_templateObject4","Cell","_templateObject5","_ref","_ref2","_ref3","min","log2","calculateBackgroundColor","_ref4","Main","main","Layout_templateObject","Content","Layout_templateObject2","Container","ControlPanel_templateObject","Layout","children","this","props","react_default","a","createElement","PureComponent","Field","_","i","key","defaultProps","ControlPanel","Button","button","Button_templateObject","Score","Score_templateObject","title","Modal","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","modal","document","body","appendChild","removeChild","_this$props","closeModal","ReactDOM","className","onClick","Component","App","bestScore","isModalOpen","mapKeyCodeToDirection","ArrowLeft","ArrowDown","ArrowRight","ArrowUp","startNewGame","setState","objectSpread","handleKeyPress","_callee","event","regenerator_default","wrap","_context","prev","next","includes","code","delay","length","stop","localStorage","getItem","JSON","parse","addEventListener","removeEventListener","nextProps","nextState","setItem","stringify","_this$state","Fragment","Components_Layout_Layout","Components_ControlPanel_ControlPanel","Button_Button","Score_Score","Components_Field_Field","style","textTransform","Components_Modal_Modal","color","Promise","resolve","setTimeout","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.532c06b5.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst H1 = styled.h1`\r\n  position: relative;\r\n  font-size: 80px;\r\n  line-height: 90px;\r\n  color: #776e65;\r\n  font-weight: bold;\r\n  margin: 0;\r\n  display: block;\r\n  float: left;\r\n  cursor: pointer;\r\n  transition: all 0.5s ease-in-out;\r\n  ::before {\r\n    content: '';\r\n    position: absolute;\r\n    font-size: 20px;\r\n    text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;\r\n    color: #bbada0;\r\n    left: 50%;\r\n    white-space: nowrap;\r\n    transform: translateX(-50%);\r\n    opacity: 0.5;\r\n  }\r\n  :hover {\r\n    ::before {\r\n      content: 'Join the numbers and get to the 2048 tile!';\r\n    }\r\n  }\r\n`;\r\n\r\nconst COLLEFT = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n`;\r\n\r\nconst COLRIGHT = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nconst P = styled.p`\r\n  color: #776e65;\r\n  max-width: 450px;\r\n  > strong {\r\n    color: #8bc34a;\r\n`;\r\n\r\nexport {COLRIGHT, COLLEFT, P, H1};","import { defaultCellValue, matrixLength, create } from '.';\r\n\r\nconst initCells = () => {\r\n  const cell1 = create(getRandomCoord(), getRandomCoord(), defaultCellValue);\r\n  const cell2 = create(getRandomCoord(), getRandomCoord(), defaultCellValue);\r\n\r\n  if (cell1.x === cell2.x && cell1.y === cell2.y) {\r\n    cell1.x = cell1.x === 0 ? 1 : cell1.x - 1;\r\n  }\r\n\r\n  return [cell1, cell2];\r\n};\r\n\r\nconst getRandomCoord = () => Math.floor(Math.random() * matrixLength);\r\n\r\nexport { initCells, getRandomCoord };\r\n","import { cloneDeep } from 'lodash';\r\nimport matrixRotate from 'matrix-rotate';\r\nimport { matrixLength, cellStates } from '.';\r\n\r\nconst directions = {\r\n  UP: 'UP',\r\n  DOWN: 'DOWN',\r\n  LEFT: 'LEFT',\r\n  RIGHT: 'RIGHT'\r\n};\r\n\r\nconst moveCells = (initCells, direction) => {\r\n  const cells = cloneDeep(initCells);\r\n\r\n  const matrix = Array.from(new Array(matrixLength), () =>\r\n    Array.from(new Array(matrixLength), () => 0)\r\n  );\r\n\r\n  cells.forEach(cell => {\r\n    matrix[cell.x][cell.y] = cell;\r\n  });\r\n\r\n  rotateMatrixFromDirection(matrix, direction);\r\n\r\n  for (let y = 0; y < matrixLength; y++) {\r\n    for (let x = 0; x < matrixLength; x++) {\r\n      if (matrix[x][y] === 0) continue;\r\n      moveCell(matrix, x, y);\r\n    }\r\n  }\r\n\r\n  rotateMatrixToDirection(matrix, direction);\r\n\r\n  for (let y = 0; y < matrixLength; y++) {\r\n    for (let x = 0; x < matrixLength; x++) {\r\n      if (matrix[x][y] === 0) continue;\r\n      matrix[x][y].x = x;\r\n      matrix[x][y].y = y;\r\n    }\r\n  }\r\n  return cells;\r\n};\r\n\r\nconst moveCell = (matrix, x, y) => {\r\n  let nextRow = y - 1;\r\n  let currentRow = y;\r\n\r\n  while (nextRow >= 0) {\r\n    if (matrix[x][nextRow] === 0) {\r\n      matrix[x][nextRow] = matrix[x][currentRow];\r\n      matrix[x][currentRow].state = cellStates.MOVING;\r\n      matrix[x][currentRow] = 0;\r\n      currentRow = nextRow;\r\n    } else if (\r\n      matrix[x][nextRow].value === matrix[x][currentRow].value &&\r\n      (matrix[x][nextRow].state === cellStates.IDLE ||\r\n        matrix[x][nextRow].state === cellStates.MOVING)\r\n    ) {\r\n      matrix[x][nextRow].state = cellStates.DYING;\r\n      matrix[x][currentRow].state = cellStates.INCREASE;\r\n      matrix[x][nextRow] = matrix[x][currentRow];\r\n      matrix[x][currentRow] = 0;\r\n      currentRow = nextRow;\r\n    } else {\r\n      break;\r\n    }\r\n    nextRow -= 1;\r\n  }\r\n};\r\n\r\nconst rotateMatrixFromDirection = (matrix, direction) => {\r\n  switch (direction) {\r\n    case directions.LEFT:\r\n      matrixRotate(matrix);\r\n      matrixRotate(matrix);\r\n      matrixRotate(matrix);\r\n      break;\r\n    case directions.DOWN:\r\n      matrixRotate(matrix);\r\n      matrixRotate(matrix);\r\n      break;\r\n    case directions.RIGHT:\r\n      matrixRotate(matrix);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nconst rotateMatrixToDirection = (matrix, direction) => {\r\n  switch (direction) {\r\n    case directions.LEFT:\r\n      matrixRotate(matrix);\r\n      break;\r\n    case directions.DOWN:\r\n      matrixRotate(matrix);\r\n      matrixRotate(matrix);\r\n      break;\r\n    case directions.RIGHT:\r\n      matrixRotate(matrix);\r\n      matrixRotate(matrix);\r\n      matrixRotate(matrix);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\n// function printMatrix(matrix) {\r\n//   let printString = '[\\n';\r\n//\r\n//   Array.from(new Array(matrixLength), (x, i) => i).forEach(colNum => {\r\n//     printString += '  ';\r\n//     printString += Array.from(new Array(matrixLength), (x, i) => i)\r\n//       .map(rowNum => JSON.stringify(matrix[colNum][rowNum]).padStart(40, ' '))\r\n//       .join(', ');\r\n//     printString += ',\\n';\r\n//   });\r\n//\r\n//   printString += ']';\r\n//   console.log(printString);\r\n// }\r\n\r\nexport { moveCells, directions };\r\n","import { cellStates } from '.';\r\n\r\nconst removeAndIncreaseCells = (cells) => {\r\n  return cells\r\n    .filter(cell => cell.state !== cellStates.DYING)\r\n    .map(cell => {\r\n      if (cell.state === cellStates.INCREASE) {\r\n        cell.value *= 2;\r\n      }\r\n      return cell;\r\n    });\r\n};\r\n\r\nexport { removeAndIncreaseCells };\r\n","import { create, matrixLength, getRandomCoord, defaultCellValue } from '.';\r\n\r\nconst populateField = (cells, restartGame) => {\r\n  const occupiedCoords = new Set();\r\n\r\n  cells.forEach(cell => {\r\n    occupiedCoords.add(cell.x * matrixLength + cell.y);\r\n  });\r\n\r\n  if (occupiedCoords.size === Math.pow(matrixLength, 2)) {\r\n    restartGame();\r\n    return [];\r\n  }\r\n  let x;\r\n  let y;\r\n  let startSize = occupiedCoords.size;\r\n  do {\r\n    x = getRandomCoord();\r\n    y = getRandomCoord();\r\n    const sum = x * matrixLength + y;\r\n    occupiedCoords.add(sum);\r\n  } while (startSize === occupiedCoords.size);\r\n\r\n  return [...cells, create(x, y, defaultCellValue)];\r\n};\r\n\r\nexport { populateField };\r\n","import { uniqueId } from 'lodash';\r\n\r\nconst cellStates = {\r\n  IDLE: 'IDLE',\r\n  MOVING: 'MOVING',\r\n  DYING: 'DYING',\r\n  INCREASE: 'INCREASE'\r\n};\r\n\r\nconst create = (x, y, value, id) => ({\r\n  x,\r\n  y,\r\n  value,\r\n  id: id ? id : uniqueId(),\r\n  state: cellStates.IDLE\r\n});\r\nconst calculateBackgroundColor = value => {\r\n  if (value === 0) {\r\n    return 'transparent';\r\n  }\r\n  const step = Math.min(16, Math.log2(value));\r\n  return `hsl(0, ${calculateSaturation(step)}%, ${calculateLightness(step)}%);`;\r\n};\r\nconst calculateSaturation = step => Math.floor((100 / 16) * step);\r\nconst calculateLightness = step => 100 - Math.floor((50 / 16) * step);\r\nexport { create, cellStates, calculateBackgroundColor };\r\n","export const defaultCellValue = 2;\r\nexport const matrixLength = 4;\r\nexport const ms = 100;\r\nexport const modalLoseMessage = 'Sorry. You lost!';\r\nexport const modalWinMessage = 'You won! Congratulations.';\r\nexport const winScore = 2048;","import { cellStates } from './cellManager';\r\n\r\nconst increaseScore = cells => {\r\n  return cells\r\n    .reduce((score, cell) => {\r\n      if (cell.state === cellStates.INCREASE) {\r\n          score += cell.value;\r\n      }\r\n      cell.state = cellStates.IDLE;\r\n      return score;\r\n    }, 0);\r\n};\r\n\r\nexport { increaseScore };\r\n","import styled from 'styled-components';\r\nimport { calculateBackgroundColor } from '../helpers';\r\n\r\nconst FieldTag = styled.div`\r\n  height: 450px;\r\n  position: relative;\r\n  width: 450px;\r\n`;\r\n\r\nconst Background = styled.div`\r\n  align-content: space-between;\r\n  background-color: #bbada0;\r\n  border-radius: 6px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  height: 450px;\r\n  justify-content: space-between;\r\n  padding: 5px;\r\n  position: absolute;\r\n  width: 450px;\r\n`;\r\n\r\nconst Playground = styled(Background)`\r\n  background-color: transparent;\r\n`;\r\n\r\nconst BackgroundCell = styled.div`\r\n  margin: 5px;\r\n  background-color: rgba(238, 228, 218, 0.35);\r\n  height: 100px;\r\n  width: 100px;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst Cell = styled(BackgroundCell)`\r\n  transform: translate(${({ x }) => x * 110}px, ${({ y }) => y * 110}px);\r\n  text-align: center;\r\n  line-height: 100px;\r\n  background-color: ${({ value }) => calculateBackgroundColor(value)};\r\n  position: absolute;\r\n  transition-property: transform;\r\n  transition: 100ms ease-in-out;\r\n  color: #6a4e4e;\r\n  font-weight: 900;\r\n  font-size: ${({ value }) =>\r\n    value < 100 ? 66 : value < 1000 ? 47 : value < 10000 ? 40 : 30}px;\r\n`;\r\n\r\nexport { FieldTag, Background, Playground, BackgroundCell, Cell };\r\n","import styled from 'styled-components';\r\n\r\nconst Main = styled.main`\r\n  align-items: center;\r\n  display: flex;\r\n  height: 100%;\r\n  justify-content: center;\r\n  width: 100%;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  min-height: 600px;\r\n  width: 600px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport { Main, Content };\r\n","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0;\r\n  width: 100%;\r\n  max-width: 450px;\r\n  align-items: center;\r\n`;\r\n\r\nexport { Container };","import React, { PureComponent } from 'react';\r\nimport {Content, Main} from \"../../styles\";\r\n\r\nclass Layout extends PureComponent {\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <Main>\r\n        <Content>{children}</Content>\r\n      </Main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Layout;\r\n","import React, { PureComponent } from 'react';\r\nimport {\r\n  Background,\r\n  BackgroundCell,\r\n  Cell,\r\n  FieldTag,\r\n  Playground\r\n} from '../../styles';\r\n\r\nclass Field extends PureComponent {\r\n  static defaultProps = {\r\n    matrix: [[]]\r\n  };\r\n  render() {\r\n    const { cells } = this.props;\r\n    return (\r\n      <FieldTag>\r\n        <Background>\r\n          {Array.from(new Array(16), (_, i) => i).map(i => (\r\n            <BackgroundCell key={i} />\r\n          ))}\r\n        </Background>\r\n        <Playground>\r\n          {cells.map(({ x, y, value, id }) => (\r\n            <Cell key={id} x={x} y={y} value={value}>\r\n              {value}\r\n            </Cell>\r\n          ))}\r\n        </Playground>\r\n      </FieldTag>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Field;\r\n","import React, { PureComponent } from 'react';\r\nimport { Container } from '../../styles';\r\n\r\nclass ControlPanel extends PureComponent {\r\n  render() {\r\n    const { children } = this.props;\r\n    return <Container>{children}</Container>;\r\n  }\r\n}\r\n\r\nexport default ControlPanel;\r\n","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background-color: #8f7a66;\r\n  border-radius: 3px;\r\n  border: none;\r\n  text-decoration: none;\r\n  color: #f9f6f2;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  height: 40px;\r\n  line-height: 32px;\r\n  font-weight: bold;\r\n  outline: none;\r\n  margin: 20px 0;\r\n  margin-left: auto;\r\n  padding: 5px 15px;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nconst Score = styled.div`\r\n  position: relative;\r\n  display: inline-block;\r\n  background-color: #bbada0;\r\n  padding: 15px 25px;\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n  border-radius: 3px;\r\n  color: white;\r\n  min-width: 100px;\r\n  margin-left: 20px;\r\n  text-align: center;\r\n  padding: 20px 25px 0;\r\n  line-height: 47px;\r\n  ::after {\r\n    content: '${({ title }) => title}';\r\n    position: absolute;\r\n    width: 100%;\r\n    top: 10px;\r\n    left: 0;\r\n    text-transform: uppercase;\r\n    font-size: 13px;\r\n    line-height: 13px;\r\n    text-align: center;\r\n    color: #eee4da;\r\n  }\r\n`;\r\n\r\nexport default Score;\r\n","import React, { Component } from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport './Modal.css';\r\n\r\nclass Modal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.modal = document.createElement('div');\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.body.appendChild(this.modal);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.body.removeChild(this.modal);\r\n  }\r\n\r\n  render() {\r\n    const { closeModal, children } = this.props;\r\n    return ReactDOM.createPortal(\r\n      <div id=\"myModal\" className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <span className=\"close\" onClick={closeModal}>\r\n              &times;\r\n            </span>\r\n            <h3>2048</h3>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            <h2>{children}</h2>\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <h4>The game will be restarted.</h4>\r\n          </div>\r\n        </div>\r\n      </div>,\r\n      this.modal\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from 'react';\nimport Layout from './Components/Layout';\nimport Field from './Components/Field';\nimport ControlPanel from './Components/ControlPanel';\nimport Button from './Components/Button';\nimport Score from './Components/Score';\nimport {\n  moveCells,\n  directions,\n  initCells,\n  removeAndIncreaseCells,\n  populateField,\n  increaseScore\n} from './helpers';\nimport Modal from './Components/Modal';\nimport {modalLoseMessage, modalWinMessage, ms, winScore} from './helpers/constants';\nimport { COLLEFT, COLRIGHT, H1, P } from './styles';\n\nclass App extends Component {\n  state = {\n    cells: initCells(),\n    score: 0,\n    bestScore: 0,\n    isModalOpen: false\n  };\n  mapKeyCodeToDirection = {\n    ArrowLeft: directions.LEFT,\n    ArrowDown: directions.DOWN,\n    ArrowRight: directions.RIGHT,\n    ArrowUp: directions.UP\n  };\n\n  startNewGame = () => {\n    this.setState(state => ({\n      ...state,\n      cells: initCells(),\n      score: 0,\n      isModalOpen: false\n    }));\n  };\n\n  restartGame = () => {\n    this.setState(state => ({\n      ...state,\n      isModalOpen: true,\n    }));\n  };\n  \n  componentWillMount() {\n    localStorage.getItem('bestScore') &&\n      this.setState({\n        bestScore: JSON.parse(localStorage.getItem('bestScore'))\n      });\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    localStorage.setItem('bestScore', JSON.stringify(nextState.bestScore));\n  }\n\n  handleKeyPress = async event => {\n    if (\n      ['ArrowLeft', 'ArrowDown', 'ArrowRight', 'ArrowUp'].includes(event.code)\n    ) {\n      this.setState(state => ({\n        ...state,\n        cells: moveCells(state.cells, this.mapKeyCodeToDirection[event.code])\n      }));\n\n      await delay(ms);\n      this.setState(\n        state => ({\n          ...state,\n          cells: removeAndIncreaseCells(state.cells)\n        }),\n        () => {\n          this.setState(\n            state => {\n              const cells = populateField(state.cells, this.startNewGame);\n              const score = state.score + increaseScore(state.cells);\n              if (score === winScore) {\n                return {\n                  ...state,\n                  isModalOpen: true\n                };\n              }\n              if (!cells.length) {\n                this.restartGame();\n                return;\n              }\n              return {\n                ...state,\n                cells,\n                score\n              };\n            },\n            () => {\n              this.setState(state => ({\n                ...state,\n                bestScore:\n                  state.bestScore < state.score ? state.score : state.bestScore\n              }));\n            }\n          );\n        }\n      );\n    }\n  };\n\n  render() {\n    const { cells, score, bestScore, isModalOpen } = this.state;\n    return (\n      <>\n        <Layout>\n          <H1>2048</H1>\n          <ControlPanel>\n            <COLLEFT>\n              <Button onClick={this.startNewGame}>New Game</Button>\n            </COLLEFT>\n            <COLRIGHT>\n              <Score title=\"Score\">{score}</Score>\n              <Score title=\"Best Score\">{bestScore}</Score>\n            </COLRIGHT>\n          </ControlPanel>\n          <Field cells={cells} />\n          <P>\n            <strong style={{ textTransform: 'upperCase' }}>\n              How to play:&nbsp;\n            </strong>\n            Use your\n            <strong> arrow keys ← ↑ → ↓</strong> to move the tiles. When two\n            tiles with the same number touch, they\n            <strong> merge into one!</strong>\n          </P>\n        </Layout>\n        {isModalOpen && (\n          <Modal closeModal={this.startNewGame}>\n            {score === winScore ? (\n              <span style={{ color: 'green' }}>{modalWinMessage}</span>\n            ) : (\n              <span style={{ color: 'red' }}>{modalLoseMessage}</span>\n            )}\n          </Modal>\n        )}\n      </>\n    );\n  }\n}\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}